// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands.auto;

import au.grapplerobotics.LaserCan;
import ca.frc6390.athena.core.RobotBase;
import ca.frc6390.athena.core.RobotDrivetrain;
import ca.frc6390.athena.core.RobotLocalization;
import ca.frc6390.athena.core.RobotSpeeds.SpeedSource;
import ca.frc6390.athena.sensors.camera.limelight.LimeLight;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.filter.MedianFilter;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
import frc.robot.utils.AutoAlignHelper;
import frc.robot.utils.ReefScoringPos;
import frc.robot.utils.ReefScoringPos.ReefPole;
public class AutoAlign extends Command {
  
  public LimeLight limelight; 
  public RobotDrivetrain<?> drivetrain;
  public boolean closeEnough;
  public boolean isDone;
  public ChassisSpeeds speeds;
  public long runTag;
  public long tagNum = -1;
  public boolean hasSet;
  public RobotLocalization localization;
  public static boolean idling = false;
  public AutoAlignHelper helper;
  public Command event;
  private LaserCan las;
  public double distToTrigger;
  

  public AutoAlign(RobotBase<?> base, LaserCan las, ReefPole pole) {
    this(ReefScoringPos.getLimelightFacing(base), base, las, pole.getApriltagId());
  }
  
  public AutoAlign(String limelight, RobotBase<?> base, LaserCan las) {
    this(limelight, base, las, -1);
  }

  public AutoAlign(String limelight, RobotBase<?> base, LaserCan las, long tagNum) {
    this(base.getVision().getLimelight(limelight), base, las, -1);
  }

  public AutoAlign(LimeLight limelight, RobotBase<?> base, LaserCan las ,long tagNum) {
    this.drivetrain = base.getDrivetrain(); 
    this.limelight = limelight;
    this.localization = base.getLocalization();
    this.tagNum = tagNum;
    this.las = las;
  }

  @Override
  public void initialize() 
  {
    closeEnough = false;
    hasSet = false;
    isDone =false;
    speeds = new ChassisSpeeds();
    runTag = tagNum;
    helper = new AutoAlignHelper(limelight, localization, drivetrain);
    helper.reset();
  }


  @Override
  public void execute() 
  {
    if(!idling)
    {
    SmartDashboard.putBoolean("Distance Valid", las.getMeasurement().status == LaserCan.LASERCAN_STATUS_VALID_MEASUREMENT);
    SmartDashboard.putBoolean("Close Enough", closeEnough);
    SmartDashboard.putNumber("Run Tag", runTag);
    SmartDashboard.putBoolean("Has Set", hasSet);
    if(limelight.hasValidTarget()){
      
      if(!hasSet){
        drivetrain.getRobotSpeeds().enableSpeeds(SpeedSource.AUTO, false);
        hasSet = true;
        if(runTag == -1)
        {
        runTag = limelight.getAprilTagID();
        }
        drivetrain.getRobotSpeeds().enableSpeeds(SpeedSource.AUTO, false);
      }
      if(limelight.getAprilTagID() == runTag) {
      drivetrain.getRobotSpeeds().enableSpeeds(SpeedSource.AUTO, false);
      helper.gatherData();
      speeds = helper.calculateSpeeds(limelight,true);
      if(limelight.getTargetArea() > 10){
        closeEnough = true;
      }
      if(las.getMeasurement().status == LaserCan.LASERCAN_STATUS_VALID_MEASUREMENT && las.getMeasurement().distance_mm < 500)
      {
        helper.setP(0.025);
      }
      }
      else{
        // drivetrain.getRobotSpeeds().enableSpeeds(SpeedSource.AUTO, true);
        // speeds = helper.calculateSpeeds(mode, false);
        speeds = new ChassisSpeeds(0, 0,0);
      }
    }
    else{
      // drivetrain.getRobotSpeeds().enableSpeeds(SpeedSource.AUTO, true);
      // speeds = helper.calculateSpeeds(mode, false);
      // speeds = new ChassisSpeeds();
      speeds = new ChassisSpeeds(-limelight.config.getYawCos(), 0,0);
    }
    if(hasSet) {
      if(las.getMeasurement() != null)
      {
      if(closeEnough  && las.getMeasurement().status == LaserCan.LASERCAN_STATUS_VALID_MEASUREMENT && las.getMeasurement().distance_mm < 120){
        isDone = true;
      } 
      }
      else
      {
        if(closeEnough){
          isDone = true;
        } 
      }

      if(las.getMeasurement().status == LaserCan.LASERCAN_STATUS_VALID_MEASUREMENT)
      {
        if(las.getMeasurement().distance_mm < distToTrigger)
        {
        CommandScheduler.getInstance().schedule(event);
        }
      }
      drivetrain.getRobotSpeeds().setFeedbackSpeeds(speeds);
    }
    else{
      drivetrain.getRobotSpeeds().setFeedbackSpeeds(new ChassisSpeeds(-limelight.config.getYawCos() / 2,0,0));
    }
  }
    else
    {
      System.out.println("Idling");
    }
}

  @Override
  public void end(boolean interrupted) 
  {
    drivetrain.getRobotSpeeds().enableSpeeds(SpeedSource.AUTO, true);
    drivetrain.getRobotSpeeds().stopFeedbackSpeeds();
    System.out.println("Done!");
  }

  @Override
  public boolean isFinished() {
    return isDone;
  }

}


BASIC AutoAlign

// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands.auto;

import au.grapplerobotics.LaserCan;
import ca.frc6390.athena.controllers.DelayedOutput;
import ca.frc6390.athena.core.RobotBase;
import ca.frc6390.athena.core.RobotLocalization;
import ca.frc6390.athena.core.RobotSpeeds.SpeedAxis;
import ca.frc6390.athena.core.RobotSpeeds.SpeedSource;
import ca.frc6390.athena.filters.FilteredValue;
import ca.frc6390.athena.sensors.camera.limelight.LimeLight;
import ca.frc6390.athena.sensors.camera.limelight.LimeLight.PoseEstimateType;
import ca.frc6390.athena.sensors.camera.limelight.LimeLight.PoseEstimateWithLatencyType;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.filter.MedianFilter;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import frc.robot.utils.ReefScoringPos;
import frc.robot.utils.ReefScoringPos.ReefPole;

/* You should consider using the more terse Command factories API instead https://docs.wpilib.org/en/stable/docs/software/commandbased/organizing-command-based.html#defining-commands */
public class BasicAlign extends Command {

  public LimeLight limeLight;
 
  public RobotBase<?> base;
    public MedianFilter filter;
    public DelayedOutput endCommand;
    public DelayedOutput seenTagAndLost;
    public DelayedOutput noTagFound;
    public ReefPole pole;
    public boolean hasSet = false;

  public PIDController controller = new PIDController(0.035, 0.004, 0);
  
  
  /** Creates a new PassiveAlign. */
  public BasicAlign(RobotBase<?> base, String llTable, ReefPole pole) {
    this.base = base;
    limeLight = this.base.getVision().getLimelight(llTable);
    this.pole = pole;
    hasSet = false;
    
    // Use addRequirements() here to declare subsystem dependencies.
  }

  public BasicAlign(RobotBase<?> base, String llTable) {
    this(base, llTable, ReefPole.NONE);
    hasSet = false;
    // Use addRequirements() here to declare subsystem dependencies.
  }
  // Called when the command is initially scheduled.
  @Override
  public void initialize() 
  {
    filter = new MedianFilter(25);
    endCommand = new DelayedOutput(() -> linedUp(), 0.5);
    noTagFound = new DelayedOutput(() -> noTag(), 5);
    seenTagAndLost = new DelayedOutput(() -> hasSeenAndLost(), 1);
    controller.setIntegratorRange(-10, 10);
    hasSet = false;
    if(!pole.equals(ReefPole.NONE))
    {
      limeLight.setPriorityID((int)pole.getApriltagId());
    }
    else
    {
      limeLight.setPriorityID(-1);
    }

  }

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() 
  {
  SmartDashboard.putBoolean("EndCommand",endCommand.getAsBoolean());
  SmartDashboard.putBoolean("No Tag",noTagFound.getAsBoolean());
  SmartDashboard.putNumber("Dist",limeLight.getPoseEstimate(PoseEstimateWithLatencyType.BOT_POSE_MT2_BLUE).getRaw()[9]);
  SmartDashboard.putNumber("HOFfset",limeLight.getTargetHorizontalOffset());

  if(DriverStation.isAutonomous())
  {
  if(pole.equals(ReefPole.NONE))
  {
  if(limeLight.hasValidTarget())
  {
  if(!hasSet)
  {
    hasSet = true;
  }
  SmartDashboard.putNumber("Rot", Math.abs(filter.calculate(limeLight.getPoseEstimate(PoseEstimateType.TARGET_POSE_ROBOT_SPACE).getRaw()[4])));
  if(Math.abs(filter.calculate(limeLight.getPoseEstimate(PoseEstimateType.TARGET_POSE_ROBOT_SPACE).getRaw()[4])) < 15)
    {
      double r = controller.calculate(limeLight.getTargetHorizontalOffset(), 0);
      double x = 0;
      if(base.getRobotSpeeds().getSpeeds("auto").equals(new ChassisSpeeds()))
      {
         x = 0.1;
      }
      SmartDashboard.putNumber("Speed", r);
      base.getDrivetrain().getRobotSpeeds().setAxisState("auto", SpeedAxis.Y, false);
      base.getDrivetrain().getRobotSpeeds().setSpeeds("feedback", x, r, 0);
    }
  }
  else
  {
    base.getDrivetrain().getRobotSpeeds().stopSpeeds("feedback");
  }
  }
  else
  {
  if(limeLight.hasValidTarget())
  {
    if(!hasSet)
    {
      hasSet = true;
    }
  SmartDashboard.putNumber("Rot", Math.abs(filter.calculate(limeLight.getPoseEstimate(PoseEstimateType.TARGET_POSE_ROBOT_SPACE).getRaw()[4])));
  if(limeLight.getAprilTagID() == pole.getApriltagId())
  {
  if(Math.abs(filter.calculate(limeLight.getPoseEstimate(PoseEstimateType.TARGET_POSE_ROBOT_SPACE).getRaw()[4])) < 10)
    {
      double r = controller.calculate(limeLight.getTargetHorizontalOffset(), 0);
      double x = 0;
      if(base.getRobotSpeeds().getSpeeds("auto").equals(new ChassisSpeeds()))
      {
         x = 0.1;
      }
      SmartDashboard.putNumber("Speed", r);
      base.getDrivetrain().getRobotSpeeds().setAxisState("auto", SpeedAxis.Y, false);
      base.getDrivetrain().getRobotSpeeds().setSpeeds("feedback", x,r,0); 
    }
  }
  else
  {
    base.getDrivetrain().getRobotSpeeds().stopSpeeds("feedback");
  }
  } 
  }
}
else
{
  if(limeLight.hasValidTarget())
  {
    if(!hasSet)
  {
    hasSet = true;
  }
  SmartDashboard.putNumber("Rot", Math.abs(filter.calculate(limeLight.getPoseEstimate(PoseEstimateType.TARGET_POSE_ROBOT_SPACE).getRaw()[4])));
  
      double r = controller.calculate(limeLight.getTargetHorizontalOffset(), 0);
      double x = 0;
      if(base.getRobotSpeeds().getSpeeds("auto").equals(new ChassisSpeeds()))
      {
         x = 0.1;
      }
      SmartDashboard.putNumber("Speed", r);
      base.getDrivetrain().getRobotSpeeds().setAxisState("auto", SpeedAxis.Y, false);
      base.getDrivetrain().getRobotSpeeds().setSpeeds("feedback", x,r,0); 
  }
}
  
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {
    base.getDrivetrain().getRobotSpeeds().stopSpeeds("feedback");
    base.getDrivetrain().getRobotSpeeds().stopSpeeds("auto");

    limeLight.setPriorityID(-1);
    base.getDrivetrain().getRobotSpeeds().setAxisState("auto", SpeedAxis.Y, true);

  }

  public boolean noTag()
  {
    return !limeLight.hasValidTarget();
  }

  public Pose2d getBotPoseTagSpace(LimeLight ll)
  {
    double dist = ll.getPoseEstimate(PoseEstimateWithLatencyType.BOT_POSE_MT2_BLUE).getRaw()[9];

    // if(!pole.equals(ReefPole.NONE))
    // {
    //   offset = pole.getOffsetInDegrees();
    // }

    double angle = ll.getTargetHorizontalOffset();
    double x = (Math.cos(Math.toRadians(angle)) * dist);
    double y = (Math.sin(Math.toRadians(angle)) * dist); 
    SmartDashboard.putNumber("x",x);
    SmartDashboard.putNumber("Y", y);
    SmartDashboard.putNumber("Angle", angle);
    

    return new Pose2d(x,y, base.getLocalization().getFieldPose().getRotation());
  }

  public boolean linedUp()
  {
    Pose2d pose = getBotPoseTagSpace(limeLight);
    return limeLight.hasValidTarget() && limeLight.getPoseEstimate(PoseEstimateWithLatencyType.BOT_POSE_MT2_BLUE).getRaw()[9] <= 0.525 && Math.abs(Math.abs(limeLight.getTargetHorizontalOffset()))< 7;
  } 
  public boolean hasSeenAndLost()
  {
    return hasSet && !limeLight.hasValidTarget();
  }
  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    if(DriverStation.isAutonomous()) return endCommand.getAsBoolean() || noTagFound.getAsBoolean() || seenTagAndLost.getAsBoolean();
    else
    {
      return false;
    }
  }
}


package frc.robot.commands.auto;
 
 import ca.frc6390.athena.controllers.DelayedOutput;
 import ca.frc6390.athena.core.RobotBase;
 import ca.frc6390.athena.core.RobotSpeeds.SpeedSource;
 import ca.frc6390.athena.sensors.camera.limelight.LimeLight;
 import ca.frc6390.athena.sensors.camera.limelight.LimeLight.PoseEstimateType;
 import ca.frc6390.athena.sensors.camera.limelight.LimeLight.PoseEstimateWithLatencyType;
 import edu.wpi.first.math.controller.PIDController;
 import edu.wpi.first.math.controller.ProfiledPIDController;
 import edu.wpi.first.math.filter.MedianFilter;
 import edu.wpi.first.math.geometry.Pose2d;
 import edu.wpi.first.math.trajectory.TrapezoidProfile.Constraints;
 import edu.wpi.first.math.util.Units;
 import edu.wpi.first.wpilibj.DriverStation;
 import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
 import edu.wpi.first.wpilibj2.command.Command;
 
 public class TagAlign extends Command {
   public RobotBase<?> base;
   public double AutoDistToTrigger;
   public LimeLight ll;
   public int runTag;
   public Pose2d curPose;
   public MedianFilter filter;
   public double thetaMeasurement;
   public ProfiledPIDController xController = new ProfiledPIDController(.75, 0, 0, new Constraints(1, 1));
   public ProfiledPIDController yController =  new ProfiledPIDController(3, 0, 0, new Constraints(2, 2));
   public PIDController rController = new PIDController(0.025, 0, 0);
   public DelayedOutput endCommand;
   public DelayedOutput noTag;
   
   public TagAlign(RobotBase<?> base,String lltable, double AutoDistToTrigger)
   {
    this.base = base;
    this.AutoDistToTrigger = AutoDistToTrigger;
    this.ll = this.base.getVision().getLimelight(lltable);
   }
 
   public TagAlign(RobotBase<?> base, String lltable)
   {
    this(base, lltable, Double.POSITIVE_INFINITY);
   }
 
   @Override
   public void initialize() 
   {
     runTag = -1;
     endCommand = new DelayedOutput(() -> closeEnough(), 0.75);
     curPose = new Pose2d();
     filter = new MedianFilter(50);
     noTag = new DelayedOutput(() -> hasNoTag(), 1.5);
     thetaMeasurement = 0;
   }
 
   public boolean hasNoTag()
   {
     return !ll.hasValidTarget();
   }
   public Pose2d getBotPoseTagSpace(LimeLight ll)
   {
     double dist = ll.getPoseEstimate(PoseEstimateWithLatencyType.BOT_POSE_MT2_BLUE).getRaw()[9];
     double angle = ll.getTargetHorizontalOffset();
     double x = (Math.cos(Math.toRadians(angle)) * dist);
     double y = (Math.sin(Math.toRadians(angle)) * dist); 
     SmartDashboard.putNumber("x", ll.getPoseEstimate(PoseEstimateWithLatencyType.BOT_POSE_BLUE).getLocalizationPose().getX());
     SmartDashboard.putNumber("Y", ll.getPoseEstimate(PoseEstimateWithLatencyType.BOT_POSE_BLUE).getLocalizationPose().getY());
     SmartDashboard.putNumber("Angle", thetaMeasurement);
     
 
     return new Pose2d(x,y, base.getLocalization().getFieldPose().getRotation());
   }
 
   // Called every time the scheduler runs while the command is scheduled.
   @Override
   public void execute() 
   {
        
     SmartDashboard.putBoolean("ENd ",endCommand.getAsBoolean());
 
     if(ll.hasValidTarget())
     { 
       if(runTag == -1)
       {
         runTag = (int)ll.getAprilTagID();
       }
       curPose = getBotPoseTagSpace(ll);
       thetaMeasurement =-filter.calculate(ll.getPoseEstimate(PoseEstimateType.TARGET_POSE_ROBOT_SPACE).getRaw()[4]);
     }
     else
     {
       thetaMeasurement = 0;
     }
 
     if(ll.getPoseEstimate(PoseEstimateWithLatencyType.BOT_POSE_MT2_BLUE).getRaw()[9] > 1)
     {
       xController.setP(1);
     }
     else
     {
       xController.setP(0.75);
     }
 
    
 
     if(ll.hasValidTarget())
     {
 
       double Xspeed = -xController.calculate(curPose.getX(), 0);
       double YSpeed = yController.calculate(curPose.getY(),0);
       double rSpeed = rController.calculate(thetaMeasurement, 0);//* Math.copySign(1, ll.getTargetHorizontalOffset()), 0);
    
     // if(DriverStation.isAutonomous())
     // {
       if(ll.getPoseEstimate(PoseEstimateWithLatencyType.BOT_POSE_MT2_BLUE).getRaw()[9] <= AutoDistToTrigger)
       {
         SmartDashboard.putBoolean("ALGIN TAKEN",true);
         // base.getDrivetrain().getRobotSpeeds().stopAutoSpeeds();
         base.getDrivetrain().getRobotSpeeds().setSpeeds("feedback",Xspeed, YSpeed, -rSpeed);
       }
       else
       {
         SmartDashboard.putBoolean("ALGIN TAKEN",false);
         base.getDrivetrain().getRobotSpeeds().stopSpeeds("feedback");
       }
     }
     else
     {
       SmartDashboard.putBoolean("ALGIN TAKEN",false);
       base.getDrivetrain().getRobotSpeeds().stopSpeeds("feedback");
     }
     
   }
 
   public boolean closeEnough()
   {
     return ll.hasValidTarget() && ll.getPoseEstimate(PoseEstimateWithLatencyType.BOT_POSE_MT2_BLUE).getRaw()[9] <= 0.5;
   }
 
   // Called once the command ends or is interrupted.
   @Override
   public void end(boolean interrupted) {
     
     
     base.getDrivetrain().getRobotSpeeds().stopSpeeds("feedback");

   }
 
   // Returns true when the command should end.
   @Override
   public boolean isFinished() {
     
     if(DriverStation.isAutonomous())
     {
       return endCommand.getAsBoolean() || noTag.getAsBoolean();
     }
     else
     {
     return false;
     }
     
   }
 }
